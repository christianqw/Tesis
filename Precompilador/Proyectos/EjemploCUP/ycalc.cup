  
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package ejemplocup;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los identificadores son listados en la segunda o demas lineas. */
terminal EXISTE, PARATODO, NEGACION, DISYUNCION, CONJUNCION, IMPLICACION, PA, PC, COMA;
terminal String IDVAR, IDFUNC, IDPRED;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
non terminal Object comienzo, cond, disy, conj, factor, pred, listaTerm, term;;
   

/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Además indica si se asocia a izquierda o derecha.
*/
  /*precedence left DISYUNCION, CONJUNCION; 
    precedence left IMPLICACION;*/

/* ------------------- Seccion de la gramatica ------------------------ */
   
/* La gramatica de nuestro analizador.
   
comienzo := cond 
		| error {: System.out.println("Error sintactico en la sentencia"); :}
		;
cond ::= disy IMPLICACION cond 
		| disy
		;
disy ::= conj DISYUNCION disy 
		| disy
		;
conj ::= factor CONJUNCION conj 
		| factor {: //factor se llama a una unidad cuantificada o negada; :} 
		;
factor ::= PARATODO IDVAR factor 
		| EXISTE IDVAR factor 
		| NEGACION factor 
		| PA cond PC 
		| pred
		;
pred ::= IDPRED PA listaTerm PC{://listaTerm representa una lista de términos:} 
		;	
listaTerm ::= term 
		| listaTerm COMA term
		;
term ::= IDVAR 
		| IDFUNC PA listaTerm PC
		;   
*/
   
/* 
   Un terminal o no terminal se define <termino> ::= termino1 termino2 ... terminoN.;
   donde termino puede ser terminal o no terminal, solo se permite un simbolo a la
   izquierda. La | sirve para indicar que es una produccion u otra.
   Debemos pasar de simbolos no terminales a simbolos terminales. Una gramatica que no
   termina en simbolos terminales se dice que no reduce, y por lo tanto nunca se finaliza
   su procesado.
*/

/* 
	'comienzo' es la raiz de la gramatica. Es declarado de esta forma en caso de tener que realizar acciones al principio de la generacion. 
	En caso de reconocer mas de una sentencia por vez se tiene que incorporar una regla del estilo: 
		listaSentencia ::= listaSentencia comienzo {: //para realizar varios analisis en una misma ejecución; :}
		| comienzo
		;
*/   
   comienzo := cond {: System.out.println("Sentencia analizada correctamente. Sin errores.");:}
		| error {: System.out.println("Error sintactico en la sentencia"); :}
		;
/* 'cond' Una condicion puede ser:
		:- disy -> cond  
		:- disy
   <noTerminal>:a esta estableciendo que 'a' representa al objeto asociado al <noTerminal>, para que el mismo pueda ser utilizado entre {: //codigo Java :}
   - se coloca el codigo en java para las acciones a tomar al cumplirse una produccion.
*/
	cond ::= disy IMPLICACION cond {:  :}
		| disy {:  :}
		;
                  
/* 
	'disy' puede ser 
*/              
   disy ::= conj DISYUNCION disy 
		| disy
		;

conj ::= factor CONJUNCION conj 
		| factor {: // factor se llama a una unidad cuantificada o negada;:} 
		;
/*
	factor. Se denomina factor a una unidad cuantificada o negada;
*/	
factor ::= PARATODO IDVAR factor 
		| EXISTE IDVAR factor 
		| NEGACION factor 
		| PA cond PC 
		| pred
		;
	
pred ::= IDPRED PA listaTerm PC{://listaTerm representa una lista de términos:} 
		;	

/*
   listaTerm representa una lista de términos utilizada dentro de los parentesis de un predicado o funcion. 
*/
listaTerm ::= term 
		| listaTerm COMA term
		;

term ::= IDVAR 
		| IDFUNC PA listaTerm PC
		;
